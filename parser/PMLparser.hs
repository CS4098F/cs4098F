-- A slightly modified xml output program based on code automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexPML
import ParPML
import SkelPML
import PrintPML
import AbsPML

import XMLPML


import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

putFileV :: Verbosity -> String -> String -> IO ()
putFileV v f s = if v > 1 then writeFile f s else return ()

runFile :: (XPrint a, Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> FilePath -> IO ()
runFile v p fo fi = readFile fi >>= run v p fo

run :: (XPrint a, Print a, Show a) => Verbosity -> ParseFun a -> String -> String -> IO ()
run v p f s  = let ts = myLLexer s in case p ts of
            Bad s    -> do putStrLn "\nParse              Failed...\n"
                           putStrV v "Tokens:"
                           putStrV v $ show ts
                           putStrLn s
                           exitFailure
            Ok  tree -> do putFileV v f $ printXML tree
                           exitSuccess


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run 2 pPML_PROCESS "./pml.xml"
    (fo:fs) -> mapM_ (runFile 2 pPML_PROCESS fo) fs





